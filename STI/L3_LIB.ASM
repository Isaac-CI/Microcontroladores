;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICAÇÕES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                   SETEMBRO DE 2022                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       NOME DO PROJETO                           *
;*                           CLIENTE                               *
;*         DESENVOLVIDO PELA MOSAICO ENGENHARIA E CONSULTORIA      *
;*   VERSÃO: 1.0                           DATA: 17/06/03          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     DESCRIÇÃO DO ARQUIVO                        *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;*                                                                 *
;*                                                                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINIÇÕES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <p12f675.inc>	;ARQUIVO PADRÃO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINAÇÃO DE MEMÓRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINIÇÃO DE COMANDOS DE USUÁRIO PARA ALTERAÇÃO DA PÁGINA DE MEMÓRIA
#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEMÓRIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MAMÓRIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIÁVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DOS NOMES E ENDEREÇOS DE TODAS AS VARIÁVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDEREÇO INICIAL DA MEMÓRIA DE
					;USUÁRIO
		W_TEMP		;REGISTRADORES TEMPORÁRIOS PARA USO
		STATUS_TEMP	;JUNTO ÀS INTERRUPÇÕES
		DADO		;ARMAZENA O DADO PARA A EEPROM, OU DADO A SER ENVIADOPELA COMUNICAÇÃO SERIAL
		ID		;IDENTIFICADOR DO DISPOSITIVO
		IDS		;VARIÁVEL QUE ARMAZENA O IDENTIFICADOR DO DISPOSITIVO PARA ENCAPSULAMENTO E ENVIO DO PACOTE
		IDD		;VARIÁVEL QUE ARMAZENA O IDENTIFICADOR DO DISPOSITIVO DE DESTINO DO PACOTE A SER ENVIADO
		COD		;VARIÁVEL QUE ARMAZENA O CÓDIGO DA INSTRUÇÃO A SER ENVIADA
		PAD		;VARIÁVEL QUE ARMAZENA O CONTEÚDO DO BYTE DE PADDING/IDENTIFICADOR DE FRAGMENTAÇÃO
		CRC		;VARIÁVEL QUE ARMAZENA O CÓDIGO DE SEGURANÇA GERADO NO ENCAPSULAMENTO DO PACOTE.
		DATA_ADDR	;VARIÁVEL QUE ARMAZENA O ENDEREÇO DO PRIMEIRO BYTE DE DADOS DO PAYLOAD
		SIZE		;VARIÁVEL QUE ARMAZENA A QUANTIDADE DE BYTES DO PAYLOAD QUE AINDA NÃO FORAM ENVIADOS
		COUNTER		;VARIÁVEL QUE ARMAZENA QUANTOS BITS FALTAM SEREM ENVIADOS NA SUBROTINA SEND_BYTE

		;NOVAS VARIÁVEIS

	ENDC			;FIM DO BLOCO DE MEMÓRIA
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA
; INICIALIZAÇÃO DA EEPROM, DE ACORDO COM A DESCRIÇÃO NO ARQUIVO "Def_Rega_Formigas.inc"

;NO ENDEREÇO ZERO DA EEPROM, GUARDA A IDENTIFICAÇÃO DO DISPOSITIVO
	ORG 0x2100
	DE	0X01

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAÍDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO SAÍDA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDEREÇO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INÍCIO DA INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDEREÇO DE DESVIO DAS INTERRUPÇÕES. A PRIMEIRA TAREFA É SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERAÇÃO FUTURA

	ORG	0x04			;ENDEREÇO INICIAL DA INTERRUPÇÃO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SERÃO ESCRITAS AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUPÇÕES

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SAÍDA DA INTERRUPÇÃO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUPÇÃO

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRIÇÃO DE FUNCIONAMENTO
; E UM NOME COERENTE ÀS SUAS FUNÇÕES.
LE_EEPROM
;LER DADO DA EEPROM, CUJO ENDEREÇO É INDICADO EM W
;O DADO LIDO RETORNA EM W
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1			;ACESSO VIA BANK 1
	MOVWF	EEADR		;INDICA O END. DE LEITURA
	BSF	EECON1,RD	;INICIA O PROCESSO DE LEITURA
	MOVF	EEDATA,W	;COLOCA DADO LIDO EM W
	BANK0			;POSICIONA PARA BANK 0
	RETURN

GRAVA_EEPROM
;ESCREVE UM DADO NA EEPROM, CUJO ENDEREÇO É INDICADO EM W
;O DADO A SER ESCRITO DEVE ESTAR ARMAZENADO NA VARIÁVEL DADO
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1			;ACESSO VIA BANK 1
	MOVWF	EEADR
	MOVF	DADO,W
	MOVWF	EEDATA
	BSF	EECON1,WREN	;HABILITA ESCRITA
	BCF	INTCON,GIE	;DESLIGA INTERRUPÇÕES
	MOVLW	B'01010101'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	MOVLW	B'10101010'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	BSF	EECON1,WR	;INICIA A ESCRITA
AGUARDA
	BTFSC	EECON1,WR	;TERMINOU?
	GOTO	AGUARDA
	BSF	INTCON,GIE	;HABILITA INTERRUPÇÕES
	BANK0			;POSICIONA PARA BANK 0
	RETURN

	
_WAIT
;A SUBROTINA _WAIT É RESPONSÁVEL POR FAZER O PROGRAMA ESPERAR POR 87 CICLOS DE
;INSTRUÇÃO A FIM DE SINCRONIZAR O ENVIO DOS BITS NA FUNÇÃO SEND_BYTE. 
	
	MOVLW	.179
	MOVWF	TMR0
    LOOP
	BTFSS	INTCON,2
	GOTO	LOOP
	BCF	INTCON,2
	
	RETURN
	
SEND_BYTE
;FUNÇÃO RESPONSÁVEL POR ENVIAR UM BYTE ARMAZENADO NA VARIÁVEL DADO POR COMUNICAÇÃO
;SERIAL POR MEIO DO PROTOCOLO RS232 MODIFICADO PARA VALORES DE TENSÃO COMPATÍVEIS
;COM O PIC12F675 NUMA TAXA DE TRANSMISSÃO DE APROXIMADAMENTE 9600 BAUDS.
	
	CALL	_WAIT
	MOVLW	.8
	MOVWF	COUNTER
    
    _NEXT
	BTFSC	DADO, 0		;VERIFICA O BIT MENOS SIGNIFICANTE DE DADO
	GOTO	_HIGH		;CASO O LSB DE WORD SEJA 1, PULA ATÉ A LABEL HIGH
	NOP			;NOP PARA SINCRONIA
	BCF	GPIO, 5		;LIMPA  GP5, TRANSMITINDO O VALOR 0
	CALL	_WAIT		;CHAMA WAIT PARA SINCRONIZAR O TEMPO DE TRANSMISSÃO DO BIT DE ACORDO COM A TAXA DE TRANSFERÊNCIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
		
	RRF	DADO, 1		;ROTACIONA 1, PARA QUE O NOVO LSB DE DADO, QUE SERÁ VERFICADO NA PROXIMA ITERAÇÃO, ASSUMA O VALOR CORRETO.
	DECFSZ	COUNTER		;DECREMETNA COUNTER, DE FORMA COM QUE ELE INDIQUE QUANTAS ITERAÇÕES FALTAM PARA O TERMINO DO ENVIO DO SIMBOLO.
	GOTO	_NEXT		;CASO COUNTER NÃO SEJA 0, VAI PARA A PROXIMA ITERAÇÃO
	
	RETURN
	
    _HIGH
	BSF	GPIO, 5		;"SETTA" O BIT DE SAÍDA CASO O VALOR DO LSB DE WORD SEJA 1.
	CALL	_WAIT		;CHAMA WAIT PARA SINCRONIZAR O TEMPO DE TRANSMISSÃO DO BIT DE ACORDO COM A TAXA DE TRANSFERÊNCIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
		
	RRF	WORD, 1		;ROTACIONA 1, PARA QUE O NOVO LSB DE WORD, QUE SERÁ VERFICADO NA PROXIMA ITERAÇÃO, ASSUMA O VALOR CORRETO.
	DECFSZ	COUNTER		;DECREMETNA COUNTER, DE FORMA COM QUE ELE INDIQUE QUANTAS ITERAÇÕES FALTAM PARA O TERMINO DO ENVIO DO SIMBOLO.
	GOTO	_NEXT		;CASO COUNTER NÃO SEJA 0, VAI PARA A PROXIMA ITERAÇÃO
	
	RETURN
	
SEND_PACKET
;FUNÇÃO RESPONSÁVEL POR ENCAPSULAR E ENVIAR UM PACOTE DO PROTOCOLO L3.
;CERTIFIQUE-SE DE QUE O IDENTIFICADOR DO DISPOSITIVO DE ORIGEM ESTEJA ARMAZENADO EM IDS,
;QUE O IDENTIFICADOR DE DISPOSITIVO DE DESTINO ESTEJA ARMAZENADO EM IDD,
;QUE O CÓDIGO DA INSTRUÇÃO DO PACOTE ESTEJA ARMAZENADO EM COD, 
;QUE O IDENTIFICADOR DE FRAGMENTAÇÃO/PADDING ESTEJA EM PAD,
;E QUE OS DADOS DO PAYLOAD ESTEJAM ARMAZENADOS NOS 6 ENDEREÇOS DA MEMÓRIA A PARTIR DO ENDEREÇO DO VALOR ARMAZENADO EM DATA_ADDR
	
	MOVLW	.6
	MOVWF	SIZE
	CLRF	CRC
	
	MOVLW	B'00000001'	;BYTE DE START
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	ADDWF	CRC,1		;SOMA O VALOR DO DADO A SER ENVIADO EM CRC, PARA HABILITAR A CHECAGEM DE ERROS
	MOVWF	DADO		;MOVE O BYTE A SER ENVIADO PARA DADO
	CALL	SEND_BYTE	;CHAMA A SUBROTINA DE ENVIO DE BYTE
	
	MOVF	IDS,W		;IDENTIFICADOR DE ORIGEM
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	ADDWF	CRC,1		;SOMA O VALOR DO DADO A SER ENVIADO EM CRC, PARA HABILITAR A CHECAGEM DE ERROS
	MOVWF	DADO		;MOVE O IDENTIFICADOR DE ORIGEM PARA DADO
	CALL	SEND_BYTE	;CHAMA A SUBROTINA DE ENVIO DE BYTE
	
	MOVF	IDD,W		;IDENTIFICADOR DE DESTINO
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	ADDWF	CRC,1		;SOMA O VALOR DO DADO A SER ENVIADO EM CRC, PARA HABILITAR A CHECAGEM DE ERROS
	MOVWF	DADO		;MOVE O IDENTIFICADOR DE ORIGEM PARA DADO
	CALL	SEND_BYTE	;CHAMA A SUBROTINA DE ENVIO DE BYTE
	
	MOVF	COD,W		;IDENTIFICADOR DE ORIGEM
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	ADDWF	CRC,1		;SOMA O VALOR DO DADO A SER ENVIADO EM CRC, PARA HABILITAR A CHECAGEM DE ERROS
	MOVWF	DADO		;MOVE O IDENTIFICADOR DE ORIGEM PARA DADO
	CALL	SEND_BYTE	;CHAMA A SUBROTINA DE ENVIO DE BYTE
	
	MOVF	DATA_ADDR,W	;MOVE O ENDEREÇO DO PRIMEIRO BYTE DE DADOS PARA WORK
	MOVWF	FSR		;MOVE O ENDERÇO DO INICIO DOS DADOS PARA FSR
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
    ITER_FSR
	MOVF	INDF,W		;MOVE O VALOR ARMAZENADO NO ENDEREÇO APONTADO POR FSR PARA WORK
	ADDWF	CRC,1		;SOMA O VALOR DO DADO A SER ENVIADO EM CRC, PARA HABILITAR A CHECAGEM DE ERROS
	MOVWF	DADO		;MOVE O DOS DADOS A SEREM ENVIADOS PARA DADO
	CALL	SEND_BYTE	;CHAMA A SUBROTINA DE ENVIO DE BYTE
	INCF	FSR		;INCREMENTA O VALOR EM FSR, PARA QUE ESTE APONTE PARA A PRÓXIMA POSIÇÃO NA MEMÓRIA
	DECFSZ	SIZE		;DECREMENTA SIZE. CASO O RESULTADO SEJA 0, SAI DO LOOP DE REPETIÇÃO
	GOTO	ITER_FSR	;CASO SIZE NÃO SEJA 0, VOLTA AO LOOP PARA EXTRAIR OS VALORES DA MEMÓRIA E ENVIÁ-LOS POR COMUNICAÇÃO SERIAL
	
	MOVF	PAD,W		;IDENTIFICADOR DE FRAGMENTAÇÃO/ENCHIMENTO
	NOP			;NOP PARA SINCRONIA
	ADDWF	CRC,1		;SOMA O VALOR DO DADO A SER ENVIADO EM CRC, PARA HABILITAR A CHECAGEM DE ERROS
	MOVWF	DADO		;MOVE O IDENTIFICADOR DE ORIGEM PARA DADO
	CALL	SEND_BYTE	;CHAMA A SUBROTINA DE ENVIO DE BYTE
	
	MOVF	CRC,W		;CODIGO DE CHECAGEM DE ERROS
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	NOP			;NOP PARA SINCRONIA
	MOVWF	DADO		;MOVE O IDENTIFICADOR DE ORIGEM PARA DADO
	CALL	SEND_BYTE	;CHAMA A SUBROTINA DE ENVIO DE BYTE
	
	RETURN
	

ENQ
;FUNÇÃO RESPONSÁVEL POR SETTAR OS PARÂMETROS PARA O ENVIO DE UM PACOTE DO PROTOCOLO L3
;CUJA INSTRUÇÃO É ENQ, RESPONSÁVEL POR VERIFICAR CASO O DISPOSITIVO DE DESTINO OU ALGUM
;PERIFÉRICO POR ELE CONTROLADO ESTÁ OPERACIONAL OU NÃO. AO FINAL, CHAMA SUBROTINA DE
;ENCAPSULAMENTO E ENVIO DE PACOTES DO PROTOCOLO L3.
	
	MOVF	ID,W
	MOVWF	IDS		;ARMAZENA EM IDS O IDENTIFICADOR DESTE DISPOSITIVO
	
	MOVLW	.2
	MOVWF	IDD		;DEFINE O ENDEREÇO DE DESTINO DO PACOTE
	
	MOVLW	.5
	MOVWF	COD		;DEFINE O CÓDIGO DA INSTRUÇÃO ENQ, QUE É 5
	
	MOVF	DATA_ADDR,W
	MOVWF	FSR		;MOVE O PONTEIRO PARA O ENDEREÇO DA PRIMEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	MOVLW	.0
	MOVWF	INDF		;MOVE 0 PARA O PRIMEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD, PARA INDICAR QUE SE DESEJA SABER SE O DISPOSITIVO DESTINO ESTÁ OPERACIONAL
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVLW	0xFF		;MOVE O VALOR DE PADDING PARA WORK
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O TERCEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O QUARTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O QUINTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O SEXTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	CALL	SEND_PACKET	;CHAMA A ROTINA PARA ENVIO DE PACOTE APÓS SETTAR TODOS OS PARÂMETROS NECESSÁRIOS
	RETURN
	
ACK
;FUNÇÃO RESPONSÁVEL POR SETTAR OS PARÂMETROS PARA O ENVIO DE UM PACOTE DO PROTOCOLO L3
;CUJA INSTRUÇÃO É ACK, RESPONSÁVEL POR AVISAR QUE A MENSAGEM ENVIADA POR OUTRO
; DISPOSITIVO FOI RECEBIDA COM SUCESSO. AO FINAL, CHAMA SUBROTINA DE ENCAPSULAMENTO
;E ENVIO DE PACOTES DO PROTOCOLO L3.
	
	MOVF	IDS,W		;MOVE PARA WORK O VALOR DE IDS, QUE QUANDO A SUBROTINA ACK É CHAMADA DEVE SER O IDENTIFICADOR DE ORIGEM DO PACOTE RECENTEMENTE RECEBIDO
	MOVWF	IDD		;DEFINE O ENDEREÇO DE DESTINO DO PACOTE

	MOVF	ID,W
	MOVWF	IDS		;ARMAZENA EM IDS O IDENTIFICADOR DESTE DISPOSITIVO
	
	MOVF	DATA_ADDR,W
	MOVWF	FSR		;MOVE O PONTEIRO PARA O ENDEREÇO DA PRIMEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	MOVF	COD,W
	MOVWF	INDF		;MOVE COD PARA O PRIMEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD, PARA INDICAR QUAL FOI A INSTRUÇÃO QUE GEROU O ENVIO DO ACK
	
	MOVLW	0xFF		;MOVE O VALOR DE PADDING PARA WORK
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O TERCEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O QUARTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O QUINTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O SEXTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	MOVLW	.6
	MOVWF	COD		;DEFINE O CÓDIGO DA INSTRUÇÃO ACK, QUE É 6. EM ACK SE SETTA COD DEPOIS DOS DADOS POIS O PRIMEIRO ELEMENTO DOS DADOS É O CÓDIGO DA INSTRUÇÃO QUE GEROU O ACK, QUE É ARMAZENADO EM COD NO DESENCAPSULAMENTO DO PACOTE RECEBIDO
	
	CALL	SEND_PACKET	;CHAMA A ROTINA PARA ENVIO DE PACOTE APÓS SETTAR TODOS OS PARÂMETROS NECESSÁRIOS
	RETURN
	
SMS
;FUNÇÃO RESPONSÁVEL POR SETTAR OS PARÂMETROS PARA O ENVIO DE UM PACOTE DO PROTOCOLO L3
;CUJA INSTRUÇÃO É SMS, RESPONSÁVEL POR SOLICITAR A UM DISPOSITIVO A MEDIDA DE UM DE SEUS SENSORES.
;AO FINAL, CHAMA SUBROTINA DE ENCAPSULAMENTO E ENVIO DE PACOTES DO PROTOCOLO L3.
	
	MOVF	ID,W
	MOVWF	IDS		;ARMAZENA EM IDS O IDENTIFICADOR DESTE DISPOSITIVO
	
	MOVLW	.2
	MOVWF	IDD		;DEFINE O ENDEREÇO DE DESTINO DO PACOTE
	
	MOVLW	.84
	MOVWF	COD		;DEFINE O CÓDIGO DA INSTRUÇÃO ENQ, QUE É 5
	
	MOVF	DATA_ADDR,W
	MOVWF	FSR		;MOVE O PONTEIRO PARA O ENDEREÇO DA PRIMEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	MOVLW	.0
	MOVWF	INDF		;MOVE 0 PARA O PRIMEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD, PARA INDICAR QUE SE DESEJA SABER SE O DISPOSITIVO DESTINO ESTÁ OPERACIONAL
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVLW	0xFF		;MOVE O VALOR DE PADDING PARA WORK
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O TERCEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O QUARTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O QUINTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O SEXTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	CALL	SEND_PACKET	;CHAMA A ROTINA PARA ENVIO DE PACOTE APÓS SETTAR TODOS OS PARÂMETROS NECESSÁRIOS
	RETURN

RMS
;FUNÇÃO RESPONSÁVEL POR SETTAR OS PARÂMETROS PARA O ENVIO DE UM PACOTE DO PROTOCOLO L3
;CUJA INSTRUÇÃO É RMS, RESPONSÁVEL POR RESPONDER UMA SOLICITAÇÃO DE MEDIDA DE SENSOR COM SEU VALOR.
;AO FINAL, CHAMA SUBROTINA DE ENCAPSULAMENTO E ENVIO DE PACOTES DO PROTOCOLO L3.
	
	MOVF	IDS,W		;MOVE PARA WORK O VALOR DE IDS, QUE QUANDO A SUBROTINA ACK É CHAMADA DEVE SER O IDENTIFICADOR DE ORIGEM DO PACOTE RECENTEMENTE RECEBIDO
	MOVWF	IDD		;DEFINE O ENDEREÇO DE DESTINO DO PACOTE
	
	MOVF	ID,W
	MOVWF	IDS		;ARMAZENA EM IDS O IDENTIFICADOR DESTE DISPOSITIVO
	
	MOVLW	.86
	MOVWF	COD		;DEFINE O CÓDIGO DA INSTRUÇÃO ACK, QUE É 86.
	
	MOVF	DATA_ADDR,W
	MOVWF	FSR		;MOVE O PONTEIRO PARA O ENDEREÇO DA PRIMEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	MOVF	ADRESH,W	;MOVE O VALOR ARMAZENADO EM ADRESH PARA WORK, QUE FOI CALCULADO NA FUNÇÃO DE DESENCAPSULAMENTO DO PACOTE RECEBIDO
	MOVWF	INDF		;MOVE O VALOR DO BYTE MAIS SIGNIFICATIVO DA CONVERSÃO A/D PARA O PRIMEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD, PARA INDICAR QUAL FOI A INSTRUÇÃO QUE GEROU O ENVIO DO ACK
	
	CLRW
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR 0 PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD, QUE REPRESENTA A PARTE FRACIONÁRIA DA MEDIDA DO SENSOR, QUE NÃO É CONSIDERADA NESTA APLICAÇÃO
	
	MOVLW	0xFF		;MOVE O VALOR DE PADDING PARA WORK
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O TERCEIRO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O QUARTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O QUINTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	INCF	FSR		;MOVE FSR PARA QUE ESTE PASSE A APONTAR PARA O SEGUNDO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	MOVWF	INDF		;MOVE O VALOR DE PADDING PARA O SEXTO ELEMENTO DO ARRAY DE DADOS DO PAYLOAD
	
	CALL	SEND_PACKET	;CHAMA A ROTINA PARA ENVIO DE PACOTE APÓS SETTAR TODOS OS PARÂMETROS NECESSÁRIOS
	RETURN
	
SUBROTINA1

	;CORPO DA ROTINA

	RETURN

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1				;ALTERA PARA O BANCO 1
	MOVLW	B'00001100' ;CONFIGURA AS PORTAS DO GPIO (PINOS). GP0, GP1, GP4 E GP5 SÃO CONFIGURADOS COMO SAÍDAS, ENQUANTO GP2 E GP3 SÃO CONFIGURADOS COMO ENTRADAS.
	CLRF	ANSEL 		;DEFINE PORTAS COMO Digital I/O
	MOVLW	B'00001000'
	MOVWF	OPTION_REG	;DEFINE OPÇÕES DE OPERAÇÃO, SETANDO O PRESCALER DE TMR0 PARA A RAZÃO 1:1
	MOVLW	B'00000000'
	MOVWF	INTCON		;DEFINE OPÇÕES DE INTERRUPÇÕES. NENHUMA INTERRUPÇÃO ESTÁ HABILITADA
	BANK0				;RETORNA PARA O BANCO
	MOVLW	B'00000111'
	MOVWF	CMCON		;DEFINE O MODO DE OPERAÇÃO DO COMPARADOR ANALÓGICO

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZAÇÃO DAS VARIÁVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	;LÊ O IDENTIFICADOR DO DESPOSITIVO GUARDADO NA MEMÓRIA EEPROM 
	CLRW
	CALL	LE_EEPROM
	MOVWF	ID
	MOVLW	0x30
	MOVWF	DATA_ADDR
	
	

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MAIN

	;CORPO DA ROTINA PRINCIPAL
	MOVLW	.29
	MOVWF	DADO
	MOVLW	.8
	CALL	GRAVA_EEPROM
	CLRF	DADO
	MOVLW	.8
	CALL	LE_EEPROM
FIM
	GOTO FIM

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END
