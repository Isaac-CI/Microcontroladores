;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICAÇÕES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                     FEVEREIRO DE 2023                           *
;*                 BASEADO NO EXEMPLO DO LIVRO                     *
;*           Desbravando o PIC. David José de Souza                *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINIÇÕES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <p12f675.inc>	;ARQUIVO PADRÃO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINAÇÃO DE MEMÓRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINIÇÃO DE COMANDOS DE USUÁRIO PARA ALTERAÇÃO DA PÁGINA DE MEMÓRIA
#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEMÓRIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MAMÓRIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIÁVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DOS NOMES E ENDEREÇOS DE TODAS AS VARIÁVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDEREÇO INICIAL DA MEMÓRIA DE
					;USUÁRIO
		W_TEMP		;REGISTRADORES TEMPORÁRIOS PARA USO
		STATUS_TEMP	;JUNTO ÀS INTERRUPÇÕES
		D0		;REGISTRADOR QUE ARMAZENA O CÓDIGO EM ASCII DO DIGITO DAS UNIDADES
		D1		;REGISTRADOR QUE ARMAZENA O CÓDIGO EM ASCII DO DIGITO DAS DEZENAS
		D2		;REGISTRADOR QUE ARMAZENA O CÓDIGO EM ASCII DO DIGITO DAS CENTENAS
		WORD		;REGISTRADOR QUE ARMAZENA O SIMBOLO A SER ENVIADO
		COUNTER		;REGISTRADOR QUE ARMAZENA QUANTAS ROTAÇÕES DO REGISTRADOR DO SIMBOLO FALTAM SEREM REALIZADAS PARA QUE O PROCESSO DE ENVIO SEJA FINALIZADO

		;COLOQUE AQUI SUAS NOVAS VARIÁVEIS
		;NÃO ESQUEÇA COMENTÁRIOS ESCLARECEDORES

	ENDC			;FIM DO BLOCO DE DEFINIÇÃO DE VARIÁVEIS

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAÍDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO SAÍDA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDEREÇO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INÍCIO DA INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDEREÇO DE DESVIO DAS INTERRUPÇÕES. A PRIMEIRA TAREFA É SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERAÇÃO FUTURA

	ORG	0x04			;ENDEREÇO INICIAL DA INTERRUPÇÃO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         ROTINA DE INTERRUPÇÃO                         *
;*                                                                       *
;* NESSE PROGRAMA, APENAS UMA INTERRUPÇÃO ACONTECE, QUE É A GERADA       *
;* PELO TÉRMINO DO PROCESSO DE CONVERSÃO REALIZADO PELO CONVERSOR        *
;* ANALÓGICO/DIGITAL, DESTA FORMA, APENAS ELA NECESSITA SER TRATADA.     *
;*                                                                       *
;* QUANDO A INTERRUPÇÃO ACONTECE, SABEMOS QUE UM PROCESSO DE CONVERSÃO   *
;* A/D FOI FINALIZADO, COM SEU VALOR JUSTIFICADO À ESQUERDA DE ACORDO    *
;* COM AS CONFIGURAÇÕES INICIAIS.                                        *
;* DESSA FORMA, O TRATAMENTO DA INTERRUPÇÃO POSSUÍ DUAS ETAPAS.          *
;* A PRIMEIRA CONSISTE EM TRANSFORMAR O RESULTADO DA CONVERSÃO A/D       *
;* ARMAZENADO EM ADRESH EM 3 DIGITOS, JÁ QUE SEU VALOR VARIA ENTRE 0 E   *
;* 255, CODIFICADOS DE ACORDO  COM A TABELA ASCII.		         *
;* A SEGUNDA ETAPA DA INTERRUPÇÃO CONSISTE EM ENCAPSULAR E ENVIAR OS     *
;* SIMBOLOS REFERENTES AOS VALORES OBTIDOS E SUA POSIÇÃO DESEJADA NO     *
;* DISPLAY DE LCD DE ACORDO COM O PROTOCOLO DE COMUNICAÇÃO SERIAL RS232  *
;* COM VELOCIDADE DE TRANSMISSÃO DE 115200 BAUDS, OU APROXIMADAMENTE 9us *
;* POR BIT. VALE SALIENTAR QUE POR ESTE MOTIVO, VÁRIAS INSTRUÇÕES NOP    *
;* NOP FORAM UTILIZADAS, A FIM DE SINCRONIZAR AS MUDANÇAS NO ESTADO DO   *
;* BIT DE SAÍDA GP5.							 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SERÃO ESCRITAS AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUPÇÕES

	BANK0
	MOVLW	0x96		;MOVE O CÓDIGO DE POSICIONAMENTO DO CURSOR 0x96(SEXTA COLUNA DA SEGUNDA LINHA) PARA WORK, PARA QUE OS VALORES ATUALIZADOS POSTERIORMENTE ESTEJAM NA POSIÇÃO CERTA.
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	' '		;MOVE O CÓDIGO DO CARACTER ' ' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	' '		;MOVE O CÓDIGO DO CARACTER ' ' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	' '		;MOVE O CÓDIGO DO CARACTER ' ' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	
	MOVLW	0x96		;MOVE O CÓDIGO DE POSICIONAMENTO DO CURSOR 0x96(SEXTA COLUNA DA SEGUNDA LINHA) PARA WORK, PARA QUE OS VALORES ATUALIZADOS POSTERIORMENTE ESTEJAM NA POSIÇÃO CERTA.
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	CLRF	D0		;LIMPA O REGISTRADOR D0, DE FORMA COM QUE SEJA POSSÍVEL DEFINIR SEU VALOR ITERATIVAMENTE
	CLRF	D1		;LIMPA O REGISTRADOR D1, DE FORMA COM QUE SEJA POSSÍVEL DEFINIR SEU VALOR ITERATIVAMENTE
	CLRF	D2		;LIMPA O REGISTRADOR D2, DE FORMA COM QUE SEJA POSSÍVEL DEFINIR SEU VALOR ITERATIVAMENTE
	MOVF	ADRESH,1        ;MOVE ADRESH PARA ELE MESMO, COM O INTUITO DE VERIFICAR SE O VALOR NELE ARMAZENADO É ZERO
	BTFSC	STATUS,2	;VERIFICA O SEGUNDO BIT DE STATUS, QUE É "SETTADO" QUANDO O RESULTADO DA OPERAÇÃO ANTERIOR É ZERO, E LIMPADO CASO CONTRÁRIO
	GOTO	_ENCODE		;QUANDO O VALOR EM ADRESH É ZERO, PULA DIRETO PARA A ROTINA DE CODIFICAÇÃO DOS DIGITOS PARA ASCII.
_LOOP
	INCF	D0		;INCREMENTA O DIGITO DAS UNIDADES
	MOVF	D0,0		;MOVE O VALOR DE D0 PARA WORK
	SUBLW	.10		;SUBTRAI 10 DE WORK. CASO O RESULTADO SEJA 0, INDICA QUE D0 DEVE RECEBER 0 E D1 DEVE SER INCREMENTADO
	BTFSS	STATUS,2	;VERIFICA O SEGUNDO BIT DE STATUS, QUE É "SETTADO" QUANDO O RESULTADO DA OPERAÇÃO ANTERIOR É ZERO, E LIMPADO CASO CONTRÁRIO
	GOTO	_DEC		;CASO D0 SEJA MENOR QUE 10, PULA AS PROXIMAS VERIFICAÇÕES, JÁ QUE NÃO SE DEVE ALTERAR NENHUM DOS DIGITOS DURANTE ESSA ITERAÇÃO.
	CLRF	D0		;LIMPA D0 CASO SEU VALOR SEJA 10
	INCF	D1		;INCREMENTA O DIGITO DAS DEZENAS CASO D0 TENHA SIDO LIMPADO
	MOVF	D1,0		;MOVE O VALOR DE D1 PARA WORK
	SUBLW	.10		;SUBTRAI 10 DE WORK. CASO O RESULTADO SEJA 0, INDICA QUE D0 DEVE RECEBER 0 E D2 DEVE SER INCREMENTADO
	BTFSS	STATUS,2	;VERIFICA O SEGUNDO BIT DE STATUS, QUE É "SETTADO" QUANDO O RESULTADO DA OPERAÇÃO ANTERIOR É ZERO, E LIMPADO CASO CONTRÁRIO
	GOTO	_DEC		;CASO D1 SEJA MENOR QUE 10, PULA AS ALTERAÇÕES EM D1 E D2, JÁ QUE ELAS NÃO SÃO NECESSÁRIAS.
	INCF	D2		;CASO D1 SEJA 10, INCREMENTA D2
	CLRF	D1		;CASO D1 SEJA 10, LIMPA D1.
_DEC	
	DECFSZ	ADRESH,1	;DECREMENTA ADRESH E ARMAZENA O RESULTADO DA OPERAÇÃO NELE MESMO
	GOTO	_LOOP		;CASO O RESULTADO DO DECREMENTO NÃO SEJA 0, VOLTA AO INICIO DO LOOP.
_ENCODE
	MOVLW	0x30		;ARMAZENA EM WORK O VALOR 0x30, OU 48 EM DECIMAL, QUE É A CONSTANTE QUE SE DEVE SOMAR AO VALOR DOS DIGITOS PARA QUE ESTES SEJAM CONVERTIDOS AO VALOR ASCII DELES.
	ADDWF	D0		;ADICIONA A CONSTANTE A D0, CONVERTENDO SEU VALOR PARA SUA REPRESENTAÇÃO EM ASCII
	ADDWF	D1		;ADICIONA A CONSTANTE A D1, CONVERTENDO SEU VALOR PARA SUA REPRESENTAÇÃO EM ASCII
	ADDWF	D2		;ADICIONA A CONSTANTE A D2, CONVERTENDO SEU VALOR PARA SUA REPRESENTAÇÃO EM ASCII
_WRITE	
	MOVF	D0, 0		;ARMAZENA O VALOR DE D0 EM WORK, PARA QUE ESTE SEJA TRANSFERIDO PARA O REGISTRADOR WORD
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVF	D1, 0		;ARMAZENA O VALOR DE D1 EM WORK, PARA QUE ESTE SEJA TRANSFERIDO PARA O REGISTRADOR WORD
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVF	D2, 0		;ARMAZENA O VALOR DE D2 EM WORK, PARA QUE ESTE SEJA TRANSFERIDO PARA O REGISTRADOR WORD
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SAÍDA DA INTERRUPÇÃO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUPÇÃO

SAI_INT
	BANK0
	BCF	PIR1,6
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRIÇÃO DE FUNCIONAMENTO
; E UM NOME COERENTE ÀS SUAS FUNÇÕES. 0100 0101

_WAIT				    ;AO TODO, A SUBROTINA WAIT DEMORA 96us PARA SER CHAMADA, EXECUTADA E RETORNAR. 
	MOVLW	.176
	MOVWF	TMR0
    LOOP
	BTFSS	INTCON,2
	GOTO	LOOP
	BCF	INTCON,2
	NOP
	NOP
	RETURN
_SEND				    ;SUBROTINA QUE RECEBE O SÍMBOLO A SER COMUNICADO EM WORK, O ENCAPSULA COM OS BITS DE INICIO, PARIDADE E FIM DE TRANSMISSÃO DE ACORDO COM O PROTOCOLO RS232 PARA COMUNICAÇÃO SERIAL DE APROXIMADAMENTE 115200 BAUS
	BCF	GPIO,5		    ;LIMPA GP5, SINALIZANDO O INICIO DA TRANSMISSÃO,POIS O BIT INICIAL É SEMPRE 0.
	NOP
	NOP
	NOP
	NOP
	NOP
	CALL	_WAIT		    ;CHAMA WAIT PARA SINCRONIZAR O TEMPO DE TRANSMISSÃO DO BIT DE ACORDO COM A TAXA DE TRANSFERÊNCIA
    _NEXT
	BTFSC	WORD, 0		    ;VERIFICA O BIT MENOS SIGNIFICANTE DE WORD
	GOTO	_HIGH		    ;CASO O LSB DE WORD SEJA 1, PULA ATÉ A LABEL HIGH
	NOP
	BCF	GPIO, 5		    ;LIMPA  GP5, TRANSMITINDO O VALOR 0
	NOP
	CALL	_WAIT		    ;CHAMA WAIT PARA SINCRONIZAR O TEMPO DE TRANSMISSÃO DO BIT DE ACORDO COM A TAXA DE TRANSFERÊNCIA
	
	RRF	WORD, 1		    ;ROTACIONA 1, PARA QUE O NOVO LSB DE WORD, QUE SERÁ VERFICADO NA PROXIMA ITERAÇÃO, ASSUMA O VALOR CORRETO.
	DECFSZ	COUNTER		    ;DECREMETNA COUNTER, DE FORMA COM QUE ELE INDIQUE QUANTAS ITERAÇÕES FALTAM PARA O TERMINO DO ENVIO DO SIMBOLO.
	GOTO	_NEXT		    ;CASO COUNTER NÃO SEJA 0, VAI PARA A PROXIMA ITERAÇÃO
	GOTO	_END		    ;CASO COUNTER SEJ 0, VAI PARA A LABEL _END, ONDE ESTÁ IMPLEMENTADA A LÓGICA DO FINAL DA TRANSMISSÃO, ENVIANDO O BIT DE PARIDADE E O BIT DE FIM DE TRANSMISSÃO
	
    _HIGH
	BSF	GPIO, 5		    ;"SETTA" O BIT DE SAÍDA CASO O VALOR DO LSB DE WORD SEJA 1.
	NOP
	CALL	_WAIT		    ;CHAMA WAIT PARA SINCRONIZAR O TEMPO DE TRANSMISSÃO DO BIT DE ACORDO COM A TAXA DE TRANSFERÊNCIA
	
	RRF	WORD, 1		    ;ROTACIONA 1, PARA QUE O NOVO LSB DE WORD, QUE SERÁ VERFICADO NA PROXIMA ITERAÇÃO, ASSUMA O VALOR CORRETO.
	DECFSZ	COUNTER		    ;DECREMETNA COUNTER, DE FORMA COM QUE ELE INDIQUE QUANTAS ITERAÇÕES FALTAM PARA O TERMINO DO ENVIO DO SIMBOLO.
	GOTO	_NEXT		    ;CASO COUNTER NÃO SEJA 0, VAI PARA A PROXIMA ITERAÇÃO
	NOP
	NOP
	
    _END
	NOP
	NOP
	BSF	GPIO, 5		    ;"SETTA" A SAÍDA , DE FORMA COM QUE INDIQUE O FIM DA TRANSMISSÃO.
	CALL	_WAIT		    ;CHAMA WAIT PARA SINCRONIZAR O TEMPO DE TRANSMISSÃO DO BIT DE ACORDO COM A TAXA DE TRANSFERÊNCIA
	RETURN
_WAIT_G
	CLRW
	MOVWF	TMR0
	MOVLW	.255
	MOVWF	COUNTER
    _LOOP_G
	BTFSS	INTCON,2
	GOTO	_LOOP_G
	BCF	INTCON,2
	DECFSZ	COUNTER
	GOTO	_LOOP_G
	RETURN
	
	
	
	
	

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       INICIO DO PROGRAMA                            *
;*								       *
;* O PROGRAMA CONSISTE EM REALIZAR A CONVERSÃO A/D EM 3 DIFERENTES     *
;* ENTRADAS DE MANEIRA CÍCLICA, ISTO É, ALTERNA INDEFINIDAMENTE        *
;* ENTRE AS TRÊS ENTRADAS A SEREM CONVERTIDAS. AO FINALIZAR UM         *
;* PROCESSO DE CONVERSÃO, UMA INTERRUPÇÃO É GERADA E TRATADA, DE       *
;* FORMA COM QUE OS 8 BITS MAIS SIGNIFICATIVOS DO VALOR OBTIDO A       * 
;* PARTIR DA CONVERSÃO SEJAM SEGMENTADOS EM TRÊS SÍMBOLOS, QUE         *
;* REPRESENTAM OS 3 DÍGITOS DE SUA REPRESENTAÇÃO DECIMAL(UMA VEZ QUE O *
;* VALOR VARIA ENTRE 0 E 255) CODIFICADOS EM ASCII. APÓS A SEGMENTAÇÃO *
;* DOS BITS, ELES SÃO ENCAPSULADOS E ENVIADOS A UM DISPLAY DE LCD POR  *
;* MEIO DO PROTOCOLO DE COMUNICAÇÃO SERIAL RS232 MODIFICADO, DE MODO A *
;* IMPRIMIR NA TELA DO DISPLAY OS SIMBOLOS CORRETOS QUE REPRESENTAM A  *
;* TENSÃO LIDA NA FASE DA TOMADA EM RELAÇÃO AO NEUTRO.		       *
;*								       *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1				;ALTERA PARA O BANCO 1
	MOVLW	B'00011111'	;CONFIGURA AS PORTAS DO GPIO. GP0, GP1, GP2, GP3 E GP4 SÃO CONFIGURADAS COMO ENTRADAS E GP5 É CONFIGURADA COMO SAÍDA
	MOVWF	TRISIO
	MOVLW	B'01110111'
	MOVWF	ANSEL		;CONFIGURA O CLOCK DE CONVERSÃO ANÁLOGICO DIGITAL Frc E OS PINOS GP0, GP1 E GP2 COMO ENTRADAS ANALÓGICAS
	MOVLW	B'00001000'
	MOVWF	OPTION_REG	;DEFINE OPÇÕES DE OPERAÇÃO, DE FORMA QUE O PRESCALER DE TIMER0 SEJA DE 1 PARA 1
	MOVLW	B'11000000'
	MOVWF	INTCON		;DEFINE OPÇÕES DE INTERRUPÇÕES, HABILITANDO AS INTERRUPÇÕES DO CONVERSOR A/D  E DE TIMER0
	MOVLW	B'01000000'
	MOVWF	PIE1		;ATIVA A INTERRUPÇÃO CAUSADA PELO CONVERSOR A/D
	BANK0				;RETORNA PARA O BANCO
	MOVLW	B'00000111'
	MOVWF	CMCON		;DEFINE O MODO DE OPERAÇÃO DO COMPARADOR ANALÓGICO
	MOVLW	B'00000001'
	MOVWF	ADCON0		;CONFIGURA O CONVERSOR ANALÓGICO DIGITAL PARA CONSIDERAR O AN0 COMO ENTRADA, VDD COMO VALOR DE REFERÊNCIA E SAÍDA JUSTIFICADA À ESQUERDA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZAÇÃO DAS VARIÁVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	BSF	GPIO, 5
	NOP
	NOP
	CALL	_WAIT_G
	
	MOVLW	'T'		;MOVE O CÓDIGO DO CARACTER 'T' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	'E'		;MOVE O CÓDIGO DO CARACTER 'E' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
		
	MOVLW	'N'		;MOVE O CÓDIGO DO CARACTER 'N' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS

	MOVLW	'S'		;MOVE O CÓDIGO DO CARACTER 'S' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	'A'		;MOVE O CÓDIGO DO CARACTER 'A' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	'O'		;MOVE O CÓDIGO DO CARACTER 'O' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	':'		;MOVE O CÓDIGO DO CARACTER ':' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	'0'		;MOVE O CÓDIGO DO CARACTER '0' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	'0'		;MOVE O CÓDIGO DO CARACTER '0' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	'0'		;MOVE O CÓDIGO DO CARACTER '0' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
	MOVLW	'V'		;MOVE O CÓDIGO DO CARACTER 'V' EM ASCII PARA WORK
	MOVWF	WORD		;TRANFERE O VALOR EM WORK PARA O REGISTRADOR WORD
	MOVLW	.8		;ARMAZENA 8 EM WORK, DE FORMA COM QUE SIRVVA DE CONTAGEM PARA QUANTOS BITS SO SIMBOLO FALTAM SEREM ENVIADOS
	MOVWF	COUNTER		;ARMAZENA O VALOR DE WORK EM COUNTER, PARA QUE SEJA POSSÍVEL RASTREAR QUANTAS ITERAÇÕES DO LOOP DE ENVIO DO SIMBOLO AINDA NECESSITAM SER REALIZADAS 
	CALL	_SEND		;CHAMA A ROTINA DE ENVIO DO PACOTE DE DADOS
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                      ROTINA PRINCIPAL                             *
;*								     *
;* A ROTINA PRINCIPAL CONSISTE DE INICIAR O PROCESSO DE CONVERSÃO    *
;* A/D, COLOCAR O MICROCONTROLADOR NO MODO DE SLEEP ENQUANTO ESTE    *
;* REALIZA O PROCESSO DE CONVERSÃO, ESPERAR A INTERRUPÇÃO GERADA     *
;* PELO TÉRMINO DO PROCESSO DE CONVERSÃO SER TRATADA, MODIFICAR A    *
;* CONFIGURAÇÃO DA CHAVE SELETORA DO MULTIPLEXADOR DE ENTRADA        *
;* ANALÓGICA PARA O CONVERSOR A/D, DE MODO A CONSIDERAR 3 POSSÍVEIS  *
;* ENTRADAS DISTINTAS DE MANEIRA CICLICA, MAIS PRECISAMENTE, NUM     *
;* PRIMEIRO MOMENTO, O PROCESSO DE CONVERSÃO É REALIZADO COM O SINAL *
;* NO PINO GP0(AN0). APÓS ISSO,  AS CONFIGURAÇÕES SÃO MUDADAS DE     *
;* FORMA COM QUE O PRÓXIMO PROCESSO DE CONVERSÃO SEJA REALIZADO COM  *
;* O SINAL QUE ENTRA POR AN1(PINO GP1). APÓS REALIZAR A CONVERSÃO DO *
;* SINAL EM AN1, AS CONFIGURAÇÕES SÃO MUDADAS MAIS UMA VEZ PARA QUE  *
;* O PRÓXIMO PROCESSO DE CONVERSÃO SEJA REALIZADO NO SINAL EM AN2,   *
;* E POR FIM, AS CONFIGURAÇÕES SÃO MODIFICADAS PARA QUE O PRÓXIMO    *
;* PROCESSO DE CONVERSÃO SEJA REALIZADO EM AN0, OU SEJA, O CICLO DE  *
;* CONFIGURAÇÃO DA CHAVE SELETORA É REINICIADO, E CONTINUA ATÉ QUE O *
;* MICROPROCESSADOR SEJA DESLIGADO OU RESETADO.                      *
;*								     *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MAIN
	;CORPO DA ROTINA PRINCIPAL
	BANK0
	BSF	ADCON0,1	    ;INICIA O PROCESSO DE CONVERSÃO A/D
	SLEEP			    ;PÕE O MICROCONTROLADOR PARA DORMIR, POUPANDO ENERGIA, ATÉ QUE A INTERUPÇÃO GERADA PELO TÉRMINO DO PROCESSO DE CONVERSÃO A/D SEJA DISPARADA.
	BANK0
	BTFSS	ADCON0,3	    ;TESTA O BIT MAIS SIGNIFICATIVO DA SELEÇÃO DA CHAVE.
	GOTO	_ADD		    ;CASO ELE NÃO ESTEJA SETADO, DEVE-SE SOMAR O VALOR 4 À ADCON0, DE FORMA COM QUE A CHAVE SELETORA PASSE DE AN0 PARA AN1 OU DE AN1 PARA AN2.
	BCF	ADCON0,3	    ;CASO ESTEJA "SETTADO", A ULTIMA CONVERSÃO FOI DO VALOR ENTRANDO POR AN2, ENTÃO DEVE-SE RESETAR A SELEÇÃO DA CHAVE PARA AN0.
	GOTO	MAIN
_ADD
	MOVLW	B'00000100'	    ;ARMAZENA O VALOR 4 NO WORK
	ADDWF	ADCON0,1	    ;ADIOCIONA O VALOR DE WORK AO VALOR DE ADCON0 E ARMAZENA O RESULTADO EM ADCON0
	GOTO	MAIN

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END